<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ux_client_script">
    <sys_ux_client_script action="INSERT_OR_UPDATE">
        <includes/>
        <macroponent display_value="Default">0a02c20197e0311013d776771153af0d</macroponent>
        <name>Fetch Tasks</name>
        <preset/>
        <required_translations>[ {
  "code" : "",
  "message" : "Install Plugins",
  "comment" : ""
} ]</required_translations>
        <script><![CDATA[/**
 * @param {params} params
 * @param {api} params.api
 * @param {any} params.event
 * @param {any} params.imports
 */
async function handler({
    api,
    event,
    helpers,
    imports
}) {
    const {
        snHttp
    } = helpers;
    let helpUserInteraction = api.data.get_help_user_interaction.results;
    if (!helpUserInteraction || helpUserInteraction.length == 0) return;
    let taskType = helpUserInteraction[0].active_setup_type.value;
    switch(taskType) {
        case 'quick':
        taskType = 'basic';
        break;
        case 'best_exp':
        taskType = 'recommended';
        break;
        case 'custom':
        taskType = 'advanced';
        break;
    };
    const installPluginsText = await helpers.translate('Install Plugins');
    snHttp(`/api/x_934615_kiss/custom_guided/tasks/${api.context.props.sysId}/${event.payload.id}`, {
            method: 'GET',
            batch: false
        })
        .then(({
            response
        }) => {
            const stepIndex = api.state.groups.findIndex(step => step.sys_id === event.payload.id);
            const newSteps = api.state.groups.slice(0);
            newSteps[stepIndex].tasks = response.result.tasks.map(task => {
                return {
                    sys_id: task.sys_id,
                    name: task.name,
                    status: task.interactionStatus,
                    task_type: task.task_type,
                    isLocked: task.isLocked 
                };
            });
            api.setState("groups", newSteps);
        })
        .catch(({
            error
        }) => {
            //TODO: Use common alert strategy
            console.log(error);
        });
}]]></script>
        <script_api_version>2.0.0</script_api_version>
        <sys_class_name>sys_ux_client_script</sys_class_name>
        <sys_created_by>vi.miranda</sys_created_by>
        <sys_created_on>2023-08-08 12:48:19</sys_created_on>
        <sys_id>80541e119764711013d776771153af5a</sys_id>
        <sys_mod_count>3</sys_mod_count>
        <sys_name>Fetch Tasks</sys_name>
        <sys_package display_value="kiss" source="x_934615_kiss">0d2ce3cb9794311013d776771153afbd</sys_package>
        <sys_policy/>
        <sys_scope display_value="kiss">0d2ce3cb9794311013d776771153afbd</sys_scope>
        <sys_update_name>sys_ux_client_script_80541e119764711013d776771153af5a</sys_update_name>
        <sys_updated_by>vi.miranda</sys_updated_by>
        <sys_updated_on>2023-08-08 12:57:41</sys_updated_on>
        <target>macroponent</target>
        <type>default</type>
    </sys_ux_client_script>
</record_update>
