<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ux_client_script">
    <sys_ux_client_script action="INSERT_OR_UPDATE">
        <includes/>
        <macroponent display_value="Default">0a02c20197e0311013d776771153af0d</macroponent>
        <name>onIntialLoad</name>
        <preset/>
        <required_translations>[ {
  "code" : "",
  "message" : "Install Plugins",
  "comment" : ""
} ]</required_translations>
        <script><![CDATA[/**
 * @param {params} params
 * @param {api} params.api
 * @param {any} params.event
 * @param {any} params.imports
 */
async function handler({
    api,
    event,
    helpers,
    imports
}) {
    const result = api.data.get_setup_1.output.result.error;
    if (result) {
        api.setState('showAlert', true);
        return;
    }

    const groups = api.data.get_setup_1.output.result.setup.steps.map(step => {
        return {
            sys_id: step.sys_id,
            name: step.name,
            description: step.rich_description,
            content: step.content,
            isLocked: step.isLocked,
            status: step.interactionStatus
        };
    });

    api.setState('setupName', api.data.get_setup_1.output.result.setup.name);
    api.setState('hasCategories', groups.length > 0);

    let pluginCategoryId = '';

    for (let i = 0; i < groups.length; i++) {
        //TODO: How to find plugins category
        if (groups[i].name.toLowerCase() === 'plugins') {
            //Required for plugin notification to go to plugin screen
            pluginCategoryId = groups[i].sys_id;
            api.setState('pluginCategoryId', pluginCategoryId);
            if (api.state.taskType && !api.state.notification.showNotification) {
                api.data.get_plugin_task_id.refresh();
            }
            break;
        }
    }

    const {
        snHttp
    } = helpers;
    let helpUserInteraction = api.data.get_help_user_interaction.results;

    let taskType = helpUserInteraction[0].active_setup_type.value;
    switch (taskType) {
        case 'quick':
            taskType = 'basic';
            break;
        case 'best_exp':
            taskType = 'recommended';
            break;
        case 'custom':
            taskType = 'advanced';
            break;
    };


    if (groups.length > 0) {
        let categoryID = groups[0].sys_id,
            stepIndex = 0;

        for (let index = 0; index < groups.length; index++) {
            if (groups[index].status !== "Completed") {
                categoryID = groups[index].sys_id;
                stepIndex = index;
                break;
            }
        }

        const installPluginsText = await helpers.translate('Install Plugins');

        snHttp(`/api/x_934615_kiss/custom_guided/tasks/${api.context.props.sysId}/${categoryID}`, {
                method: 'GET',
                batch: false
            })
            .then(({
                response
            }) => {

                let newSteps = groups.slice(0);
                newSteps[stepIndex].tasks = response.result.tasks.map(task => {
                    return {
                        sys_id: task.sys_id,
                        name: task.name,
                        status: task.interactionStatus,
                        task_type: task.task_type,
                        isLocked: task.isLocked
                    };
                });
                console.log(newSteps[stepIndex].tasks);
                api.setState("groups", newSteps);
            })
            .catch(({
                error
            }) => {
                //TODO: Use common alert strategy
                console.log(error);
                api.setState("groups", groups);
            });
    }

}]]></script>
        <script_api_version>2.0.0</script_api_version>
        <sys_class_name>sys_ux_client_script</sys_class_name>
        <sys_created_by>vi.miranda</sys_created_by>
        <sys_created_on>2023-08-08 12:23:25</sys_created_on>
        <sys_id>9f9e4a199724711013d776771153afa7</sys_id>
        <sys_mod_count>4</sys_mod_count>
        <sys_name>onIntialLoad</sys_name>
        <sys_package display_value="kiss" source="x_934615_kiss">0d2ce3cb9794311013d776771153afbd</sys_package>
        <sys_policy/>
        <sys_scope display_value="kiss">0d2ce3cb9794311013d776771153afbd</sys_scope>
        <sys_update_name>sys_ux_client_script_9f9e4a199724711013d776771153afa7</sys_update_name>
        <sys_updated_by>vi.miranda</sys_updated_by>
        <sys_updated_on>2023-08-08 12:57:41</sys_updated_on>
        <target>macroponent</target>
        <type>default</type>
    </sys_ux_client_script>
</record_update>
